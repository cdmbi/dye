bio <- as.character(packages$Bioconductor)
library(RCurl)
x <- getURL("https://raw.githubusercontent.com/Rnewbie/OliFP/master/packages_to_be_install.csv")
packages <- read.csv(text=x, header = TRUE)
bio <- as.character(packages$Bioconductor)
source("http://bioconductor.org/biocLite.R")
biocLite(bio)
library(protr)
library(readxl)
library(Caret)
library(Biostrings)
library(RWeka)
library(dplyr)
library(e1071)
library(randomForest)
library(nnet)
library(caret)
library(Biostrings)
library(Rcpi)
source("http://bioconductor.org/biocLite.R")
biocLite("Rcpi")
library(Rcpi)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
library(rJava)
library(Rhipe)
install.packages("Rhipe")
library(rJava)
library(RJSONIO)
library(itertools)
install.packages("itertools")
## try http if https is not available
source("https://bioconductor.org/biocLite.R")
biocLite("BioSeqClass")
library(GioSeqClass)
library(BioSeqClass)
?hr
?cdhitHR
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
data(iris)
library(rJava)
Sys.getenv("JAVA_HOME")
Sys.setenv(JAVA_HOME = "C:\\Program Files/Java/jre1.8.0_65/")
library(rJava)
130 - 1 - 62 - 35
# the value for B4 is:
130 - 32 - 35 - 34
# the value for C2 is:
130 - 62 - 35 - 2
# the value for c3 is:
130 - 36 - 31 - 33
# the value for D4 is:
130 - 1 - 35 - 30
# the value for A3 is:
130 - 61 - 2 - 64
# the value for A4 is:
date()
# the value for A4 is:
130 - 1 - 62 - 63
# isolate a signal column within a dataset using the varialbe$column notation.
#display the contents of the Soldiers column from the soldiersByCity variable
newvec = 25:45
## Make a single time-series for annual, quarterly, and monthly data
ts(newvec, start = 1965)  # annual
ts(newvec, start = 2965, frequency = 4)
ts(newvec, start = 1965, frequency = 12) # monthly
## Make a matrix
mat = matrix(1:60, nrow = 12)
# Make a multiple time-series object, monthly data
ts(mat, start = 1955, frequency = 12)
## New logical vector
vector(mode = "logical", length = 3)
## New numeric vector
vector(mode = "numeric", length = 3)
## New character vector
vector(mode = "character", length = 3)
## New list object
vector(mode = "list", length = 3)
## Make simple data vector
sample = c(1.2, 2.4, 3.1, 4, 2.7)
## Make into integer valeus
as.integer(sample)
## Make into characters
as.character(sample)
as.list(sample)
## Make a matrix of numbers
matdata = matrix(1:12, ncol = 4)
## Coerce to a table
as.table(matdata)
library(rJava)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(rjava)
library(rJava)
Sys.setenv(JAVA_HOME)
library(rJava)
library(RWeka)
library(rJava)
library(rJava)
library(rJava)
library(protr)
library(rJava)
system("java -version")
library(BioSeqClass)
aa.index
View(aa.index)
str(aa.index)
library(rJava)
setwd("C:/Users/Saw/Downloads/dye")
read_file <- function(x){
library(caret)
library(data.table)
data <- fread(x)
data <- as.data.frame(data)
descriptors <- data[, 2:ncol(data)]
set.seed(1)
filtered_descriptors <- descriptors[, -nearZeroVar(descriptors)]
Activity <- data$Activity
filtered_data <- cbind(Activity, filtered_descriptors)
return(filtered_data)
}
AtomPairs2D_fingerPrintCount <- read_file("AtomPairs2DFingerprintCount.csv")
AtomPairs2D_fingerPrinter <- read_file("AtomPairs2DFingerprinter.csv")
Substructure_fingerPrintCount <- read_file("substructure_fingerprint.csv")
Substructure_fingerPrinter <- read_file("substructure_fingerprint.csv")
Extended_finterPrinter <- read_file("extended_finger_printer.csv")
FingerPrinter <- read_file("finger_printer.csv")
Estate_FingerPrinter <- read_file("estate_fingerprint.csv")
GraphOnly_FingerPrinter <- read_file("graph_only_fingerprint.csv")
KlekotaRoth_FingerprintCount <- read_file("KlekotaRothFingerprintCount.csv")
KlekotaRoth_FingerPrinter <- read_file("KlekotaRothFingerprinter.csv")
MACCS_FingerPrinter <- read_file("MACCS_finger_printer.csv")
Pubchem_FingerPrinter <- read_file("Pubchem_finger_printer.csv")
input <- list(AtomPairs2D_fingerPrintCount=AtomPairs2D_fingerPrintCount,
AtomPairs2D_fingerPrinter = AtomPairs2D_fingerPrinter,
Substructure_fingerPrintCount = Substructure_fingerPrintCount,
Substructure_fingerPrinter = Substructure_fingerPrinter,
Extended_finterPrinter = Extended_finterPrinter,
FingerPrinter = FingerPrinter,
Estate_FingerPrinter = Estate_FingerPrinter,
GraphOnly_FingerPrinter = GraphOnly_FingerPrinter,
KlekotaRoth_FingerprintCount = KlekotaRoth_FingerprintCount,
KlekotaRoth_FingerPrinter = KlekotaRoth_FingerPrinter,
MACCS_FingerPrinter = MACCS_FingerPrinter,
Pubchem_FingerPrinter = Pubchem_FingerPrinter)
rm(AtomPairs2D_fingerPrintCount)
rm(AtomPairs2D_fingerPrinter)
rm(Estate_FingerPrinter)
rm(Extended_finterPrinter)
rm(FingerPrinter)
rm(GraphOnly_FingerPrinter)
rm(KlekotaRoth_FingerprintCount)
rm(KlekotaRoth_FingerPrinter)
rm(MACCS_FingerPrinter)
rm(Pubchem_FingerPrinter)
rm(Substructure_fingerPrintCount)
rm(Substructure_fingerPrinter)
randomForest_feature_importance <- function(x) {
library(doSNOW)
library(foreach)
library(parallel)
cl <- makeCluster(8)
registerDoSNOW(cl)
results <- list(100)
results <- foreach (i = 1:100) %dopar% {
data <- x
trainIndex <- caret::createDataPartition(data$Activity, p = .9,
list = FALSE, times = 1)
train <- data[trainIndex, ]
test <- data[-trainIndex, ]
model <- randomForest::randomForest(Activity~., data = train, importance = TRUE)
#sel <- prospectr::naes(x, k = 90, pc = 5, iter.max = 100)
#myData <- x[sel$model, ]
#Test <- x[sel$test, ]
#ctrl <- caret::trainControl(method = "repeatedcv", number = 10, repeats = 1)
#tune <- caret::train(pIC50 ~., data = myData,  method = "rf", tuneLength = 10,
#                     trControl = ctrl)
#model <- randomForest::randomForest(pIC50~., data = myData, importance = TRUE,
#                                    mtry = tune$bestTune[[1]])
importance <- model$importance
rm(data)
rm(trainIndex)
rm(trian)
rm(test)
rm(model)
results[[i]] <- importance
}
return(results)
stopCluster(cl)
}
plot_importance <- function(x) {
library(ggplot2)
randomForest_feature_importance_result <- randomForest_feature_importance(x)
df <- as.data.frame(randomForest_feature_importance_result)
df <- t(apply(df, 1, round, digits = 4))
index <- seq(2, 200, by = 2)
df <- df[, index]
mean <- data.frame(apply(df, 1, mean))
sd <- data.frame(apply(df, 1, sd))
geni_index <- cbind(mean, sd)
colnames(geni_index) <- c("mean", "sd")
geni_index <- geni_index[order(mean, decreasing = TRUE),]
geni_index <- head(geni_index, 30)
set.seed(200)
a <- cbind(descriptors = rownames(geni_index), geni_index)
a$descriptors <- factor(a$descriptors, levels = a[order(a$mean), "descriptors"])
z <- ggplot2::ggplot(a, aes(x = mean, y = descriptors)) +
geom_point(size = 4, colour = "black", fill = "red", pch = 21) +
geom_errorbarh(aes(xmin = mean-sd, xmax = mean+sd), colour = "black") +
ggtitle("") + xlab("Gini index") + ylab ("") +
theme(
plot.margin = grid::unit(c(1, 1, 1, 1), "cm"),
panel.border = element_rect(linetype = "solid", colour = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"))
z + cowplot::background_grid(major = "xy", minor = "none")
}
plot_results_classification <- lapply(input, function(x) {
results <- plot_importance(x)
return(results)
})
setwd("C:/Users/Saw/Downloads/dye")
read_file <- function(x){
library(caret)
library(data.table)
data <- fread(x)
data <- as.data.frame(data)
descriptors <- data[, 2:ncol(data)]
set.seed(1)
filtered_descriptors <- descriptors[, -nearZeroVar(descriptors)]
Activity <- data$Activity
filtered_data <- cbind(Activity, filtered_descriptors)
return(filtered_data)
}
AtomPairs2D_fingerPrintCount <- read_file("AtomPairs2DFingerprintCount.csv")
AtomPairs2D_fingerPrinter <- read_file("AtomPairs2DFingerprinter.csv")
Substructure_fingerPrintCount <- read_file("substructure_fingerprint.csv")
Substructure_fingerPrinter <- read_file("substructure_fingerprint.csv")
Extended_finterPrinter <- read_file("extended_finger_printer.csv")
FingerPrinter <- read_file("finger_printer.csv")
Estate_FingerPrinter <- read_file("estate_fingerprint.csv")
GraphOnly_FingerPrinter <- read_file("graph_only_fingerprint.csv")
KlekotaRoth_FingerprintCount <- read_file("KlekotaRothFingerprintCount.csv")
KlekotaRoth_FingerPrinter <- read_file("KlekotaRothFingerprinter.csv")
MACCS_FingerPrinter <- read_file("MACCS_finger_printer.csv")
Pubchem_FingerPrinter <- read_file("Pubchem_finger_printer.csv")
a <- plot_importance(AtomPairs2D_fingerPrinter)
a
randomForest_feature_importance <- function(x) {
library(doSNOW)
library(foreach)
library(parallel)
cl <- makeCluster(8)
registerDoSNOW(cl)
results <- list(100)
results <- foreach (i = 1:100) %dopar% {
data <- x
trainIndex <- caret::createDataPartition(data$Activity, p = .9,
list = FALSE, times = 1)
train <- data[trainIndex, ]
test <- data[-trainIndex, ]
model <- randomForest::randomForest(Activity~., data = train, importance = TRUE)
#sel <- prospectr::naes(x, k = 90, pc = 5, iter.max = 100)
#myData <- x[sel$model, ]
#Test <- x[sel$test, ]
#ctrl <- caret::trainControl(method = "repeatedcv", number = 10, repeats = 1)
#tune <- caret::train(pIC50 ~., data = myData,  method = "rf", tuneLength = 10,
#                     trControl = ctrl)
#model <- randomForest::randomForest(pIC50~., data = myData, importance = TRUE,
#                                    mtry = tune$bestTune[[1]])
importance <- model$importance
rm(data)
rm(trainIndex)
rm(trian)
rm(test)
rm(model)
results[[i]] <- importance
}
return(results)
stopCluster(cl)
}
plot_importance <- function(x) {
library(ggplot2)
library(cowplot)
randomForest_feature_importance_result <- randomForest_feature_importance(x)
df <- as.data.frame(randomForest_feature_importance_result)
df <- t(apply(df, 1, round, digits = 4))
index <- seq(2, 200, by = 2)
df <- df[, index]
mean <- data.frame(apply(df, 1, mean))
sd <- data.frame(apply(df, 1, sd))
geni_index <- cbind(mean, sd)
colnames(geni_index) <- c("mean", "sd")
geni_index <- geni_index[order(mean, decreasing = TRUE),]
geni_index <- head(geni_index, 30)
set.seed(200)
a <- cbind(descriptors = rownames(geni_index), geni_index)
a$descriptors <- factor(a$descriptors, levels = a[order(a$mean), "descriptors"])
z <- ggplot2::ggplot(a, aes(x = mean, y = descriptors)) +
geom_point(size = 4, colour = "black", fill = "red", pch = 21) +
geom_errorbarh(aes(xmin = mean-sd, xmax = mean+sd), colour = "black") +
ggtitle("") + xlab("Gini index") + ylab ("") +
theme(
plot.margin = grid::unit(c(1, 1, 1, 1), "cm"),
panel.border = element_rect(linetype = "solid", colour = "black", fill = NA, size = 1),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"))
z + cowplot::background_grid(major = "xy", minor = "none")
}
a <- plot_importance(AtomPairs2D_fingerPrinter)
a
b <- plot_importance(AtomPairs2D_fingerPrintCount)
b
c <- plot_importnace(Substructure_fingerPrinter)
c <- plot_importance(Substructure_fingerPrinter)
c
d <- plot_importance(Substructure_fingerPrintCount)
d
AtomPairs2D_fingerPrintCount <- read_file("AtomPairs2DFingerprintCount.csv")
AtomPairs2D_fingerPrinter <- read_file("AtomPairs2DFingerprinter.csv")
Substructure_fingerPrintCount <- read_file("substructure_fingerprint_count.csv")
Substructure_fingerPrinter <- read_file("substructure_fingerprint.csv")
Extended_finterPrinter <- read_file("extended_finger_printer.csv")
FingerPrinter <- read_file("finger_printer.csv")
Estate_FingerPrinter <- read_file("estate_fingerprint.csv")
GraphOnly_FingerPrinter <- read_file("graph_only_fingerprint.csv")
KlekotaRoth_FingerprintCount <- read_file("KlekotaRothFingerprintCount.csv")
KlekotaRoth_FingerPrinter <- read_file("KlekotaRothFingerprinter.csv")
MACCS_FingerPrinter <- read_file("MACCS_finger_printer.csv")
Pubchem_FingerPrinter <- read_file("Pubchem_finger_printer.csv")
d <- plot_importance(Substructure_fingerPrintCount)
d
e <- plot_importance(Extended_finterPrinter)
e
f <- plot_importance(FingerPrinter)
f
